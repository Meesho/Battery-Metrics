/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getMavenRepositoryUrl() {
    return hasProperty('repositoryUrl') ? property('repositoryUrl') : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getMavenRepositoryUsername() {
    return hasProperty('repositoryUsername') ? property('repositoryUsername') : ""
}

def getMavenRepositoryPassword() {
    return hasProperty('repositoryPassword') ? property('repositoryPassword') : ""
}

def configureBatteryMetricsPom(def pom) {
    pom.whenConfigured {
        applyOptionalDeps it, getOptionalDeps()
    }
    pom.project {
        name POM_NAME
        artifactId POM_ARTIFACT_ID
        packaging POM_PACKAGING
        description 'BatteryMetrics Battery instrumentation for Android'
        url 'https://github.com/facebookincubator/Battery-Metrics'

        scm {
            url 'https://github.com/facebookincubator/Battery-Metrics.git'
            connection 'scm:git:https://github.com/facebookincubator/Battery-Metrics.git'
            developerConnection 'scm:git:git@github.com:facebookincubator/Battery-Metrics.git'
        }

        licenses {
            license {
                name 'MIT License'
                url 'https://github.com/facebookincubator/Battery-Metrics/blob/master/LICENSE'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'facebook'
                name 'Facebook'
            }
        }
    }
}

// Hack to modify the resulting pom's dependencies to use
// <optional>true</optional> where appropriate.
def applyOptionalDeps(def pom, def optionalDeps) {
    pom.dependencies.each { dep ->
        def artifactLabel = dep.groupId + ':' + dep.artifactId
        if (optionalDeps.contains(artifactLabel)) {
            dep.optional = true
        }
    }
}

def getOptionalDeps() {
    if (hasProperty('POM_OPTIONAL_DEPS')) {
        return property('POM_OPTIONAL_DEPS').split(',') as Set
    } else {
        return []
    }
}

afterEvaluate { project ->
    task androidJavadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.srcDirs
        exclude("**/BUCK")

        classpath += files(android.bootClasspath)
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar1(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts {
        archives androidJavadocJar
        archives androidSourcesJar1
    }

    version = VERSION_NAME
    group = GROUP

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        configuration = configurations.archives
        repositories.mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            repository(url: getMavenRepositoryUrl()) {
                authentication(
                    userName: getMavenRepositoryUsername(),
                    password: getMavenRepositoryPassword())

            }

            configureBatteryMetricsPom pom
        }
    }

    task installArchives(type: Upload) {
        configuration = configurations.archives
        repositories {
            mavenDeployer {
                repository url: "file://${System.properties['user.home']}/.m2/repository"
                configureBatteryMetricsPom pom
            }
        }
    }
}
